plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id "com.palantir.docker" version "0.36.0"
}

group = 'com.yun.configservice'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-config-server'
	implementation 'org.springframework.cloud:spring-cloud-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}


// 테스트 코드를 제외한 빌드 수행
tasks.withType(Test) {
	enabled = false
}

tasks.register("prepareKotlinBuildScriptModel"){}

docker {
	println(tasks.bootJar.outputs.files)
	//이미지 이름
	name rootProject.name + '-' + project.name + ":" + version
	//어떤 dockerFile
	dockerfile file('../Dockerfile')
	//어떤 파일들을 dockerfile에 복사할 것인가
	files tasks.bootJar.outputs.files
	//docker에 전달할 인자
	buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}